[
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "ST558-2024-Project-Final",
    "section": "",
    "text": "Diabetes is a wide-spread disease, especially in the US. Although genetic plays a role in the ethiology of diabetes, it has been estimated around 90% to 95% of diabetes cases could be attributed to life-style factors, like diet, weight management and physical activity.This data set aimed to providel links between patients’ diabetic conditions, life pattern behavior and social-economic status.\nFor this project, a csv of the data set available on Kaggle for the year 2015 was used. This original data set contains responses from 441,455 individuals and has 330 features. These features are either questions directly asked of participants, or calculated variables based on individual participant responses.The file we are interested in (diabetes _ binary _ health _ indicators _ BRFSS2015.csv) is a clean dataset of 253,680 survey responses to the CDC’s BRFSS2015. The target variable Diabetes_binary has 2 classes. 0 is for no diabetes, and 1 is for prediabetes or diabetes. This dataset has 21 feature variables and is not balanced. Our goal is to find how the combination of different input factors could contribute to the prediction of diabetic status.\n\n\n\nLet’s read the file into R first.\n\ndiabetesdata &lt;- read.csv (\"data\\\\diabetes_binary_health_indicators_BRFSS2015.csv\")\nstr (diabetesdata)\n\n'data.frame':   253680 obs. of  22 variables:\n $ Diabetes_binary     : num  0 0 0 0 0 0 0 0 1 0 ...\n $ HighBP              : num  1 0 1 1 1 1 1 1 1 0 ...\n $ HighChol            : num  1 0 1 0 1 1 0 1 1 0 ...\n $ CholCheck           : num  1 0 1 1 1 1 1 1 1 1 ...\n $ BMI                 : num  40 25 28 27 24 25 30 25 30 24 ...\n $ Smoker              : num  1 1 0 0 0 1 1 1 1 0 ...\n $ Stroke              : num  0 0 0 0 0 0 0 0 0 0 ...\n $ HeartDiseaseorAttack: num  0 0 0 0 0 0 0 0 1 0 ...\n $ PhysActivity        : num  0 1 0 1 1 1 0 1 0 0 ...\n $ Fruits              : num  0 0 1 1 1 1 0 0 1 0 ...\n $ Veggies             : num  1 0 0 1 1 1 0 1 1 1 ...\n $ HvyAlcoholConsump   : num  0 0 0 0 0 0 0 0 0 0 ...\n $ AnyHealthcare       : num  1 0 1 1 1 1 1 1 1 1 ...\n $ NoDocbcCost         : num  0 1 1 0 0 0 0 0 0 0 ...\n $ GenHlth             : num  5 3 5 2 2 2 3 3 5 2 ...\n $ MentHlth            : num  18 0 30 0 3 0 0 0 30 0 ...\n $ PhysHlth            : num  15 0 30 0 0 2 14 0 30 0 ...\n $ DiffWalk            : num  1 0 1 0 0 0 0 1 1 0 ...\n $ Sex                 : num  0 0 0 0 0 1 0 0 0 1 ...\n $ Age                 : num  9 7 9 11 11 10 9 11 9 8 ...\n $ Education           : num  4 6 4 3 5 6 6 4 5 4 ...\n $ Income              : num  3 1 8 6 4 8 7 4 1 3 ...\n\n\nAs shown, this data set has 22 variables, we will use only 1 Diabetes_binary as an outcome variable, and all others as predictors. However, there are many numeric variables that should actually be treated as factors. We will change those variables.\n\nlibrary (dplyr)\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndiabetesdata &lt;- diabetesdata |&gt; mutate (across (-c(MentHlth, PhysHlth, BMI), as.factor))\nstr (diabetesdata)\n\n'data.frame':   253680 obs. of  22 variables:\n $ Diabetes_binary     : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 1 1 1 2 1 ...\n $ HighBP              : Factor w/ 2 levels \"0\",\"1\": 2 1 2 2 2 2 2 2 2 1 ...\n $ HighChol            : Factor w/ 2 levels \"0\",\"1\": 2 1 2 1 2 2 1 2 2 1 ...\n $ CholCheck           : Factor w/ 2 levels \"0\",\"1\": 2 1 2 2 2 2 2 2 2 2 ...\n $ BMI                 : num  40 25 28 27 24 25 30 25 30 24 ...\n $ Smoker              : Factor w/ 2 levels \"0\",\"1\": 2 2 1 1 1 2 2 2 2 1 ...\n $ Stroke              : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ HeartDiseaseorAttack: Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 1 1 1 2 1 ...\n $ PhysActivity        : Factor w/ 2 levels \"0\",\"1\": 1 2 1 2 2 2 1 2 1 1 ...\n $ Fruits              : Factor w/ 2 levels \"0\",\"1\": 1 1 2 2 2 2 1 1 2 1 ...\n $ Veggies             : Factor w/ 2 levels \"0\",\"1\": 2 1 1 2 2 2 1 2 2 2 ...\n $ HvyAlcoholConsump   : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ AnyHealthcare       : Factor w/ 2 levels \"0\",\"1\": 2 1 2 2 2 2 2 2 2 2 ...\n $ NoDocbcCost         : Factor w/ 2 levels \"0\",\"1\": 1 2 2 1 1 1 1 1 1 1 ...\n $ GenHlth             : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 5 3 5 2 2 2 3 3 5 2 ...\n $ MentHlth            : num  18 0 30 0 3 0 0 0 30 0 ...\n $ PhysHlth            : num  15 0 30 0 0 2 14 0 30 0 ...\n $ DiffWalk            : Factor w/ 2 levels \"0\",\"1\": 2 1 2 1 1 1 1 2 2 1 ...\n $ Sex                 : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 2 1 1 1 2 ...\n $ Age                 : Factor w/ 13 levels \"1\",\"2\",\"3\",\"4\",..: 9 7 9 11 11 10 9 11 9 8 ...\n $ Education           : Factor w/ 6 levels \"1\",\"2\",\"3\",\"4\",..: 4 6 4 3 5 6 6 4 5 4 ...\n $ Income              : Factor w/ 8 levels \"1\",\"2\",\"3\",\"4\",..: 3 1 8 6 4 8 7 4 1 3 ...\n\n\nNow you could see the attributes of the variables have been reset. Let’s check whether are missing values in each column.\n\nmissing_counts &lt;- diabetesdata |&gt; \n  summarise(across(everything(), ~sum(is.na(.))))\nmissing_counts\n\n  Diabetes_binary HighBP HighChol CholCheck BMI Smoker Stroke\n1               0      0        0         0   0      0      0\n  HeartDiseaseorAttack PhysActivity Fruits Veggies HvyAlcoholConsump\n1                    0            0      0       0                 0\n  AnyHealthcare NoDocbcCost GenHlth MentHlth PhysHlth DiffWalk Sex Age\n1             0           0       0        0        0        0   0   0\n  Education Income\n1         0      0\n\n\nTo our relief, there is no missing data in the data set. Now we are ready to do some exploratory data analysis.\n\n\n\nWe could generate a table with incidence of diabetes and other categorical variables.\n\ntable (diabetesdata$Diabetes_binary, diabetesdata$HighBP, diabetesdata$HighChol)\n\n, ,  = 0\n\n   \n        0     1\n  0 97651 36778\n  1  4269  7391\n\n, ,  = 1\n\n   \n        0     1\n  0 38458 45447\n  1  4473 19213\n\ndiabetesdata |&gt; group_by(HighBP, HighChol, Diabetes_binary) |&gt; summarize (count = n())\n\n`summarise()` has grouped output by 'HighBP', 'HighChol'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 8 × 4\n# Groups:   HighBP, HighChol [4]\n  HighBP HighChol Diabetes_binary count\n  &lt;fct&gt;  &lt;fct&gt;    &lt;fct&gt;           &lt;int&gt;\n1 0      0        0               97651\n2 0      0        1                4269\n3 0      1        0               38458\n4 0      1        1                4473\n5 1      0        0               36778\n6 1      0        1                7391\n7 1      1        0               45447\n8 1      1        1               19213\n\ndiabetesdata |&gt; group_by (Smoker, HeartDiseaseorAttack, Diabetes_binary) |&gt; summarize (count = n())\n\n`summarise()` has grouped output by 'Smoker', 'HeartDiseaseorAttack'. You can\noverride using the `.groups` argument.\n\n\n# A tibble: 8 × 4\n# Groups:   Smoker, HeartDiseaseorAttack [4]\n  Smoker HeartDiseaseorAttack Diabetes_binary  count\n  &lt;fct&gt;  &lt;fct&gt;                &lt;fct&gt;            &lt;int&gt;\n1 0      0                    0               118086\n2 0      0                    1                14079\n3 0      1                    0                 6142\n4 0      1                    1                 2950\n5 1      0                    0                84233\n6 1      0                    1                13389\n7 1      1                    0                 9873\n8 1      1                    1                 4928\n\n\nFrom the summary table we could easily find those factors significantly contribute to the occurance of diabetes. Is there a way to find the hazard ratio of those life-style factors to diabetes? Luckily there is a package for that.\n\nlibrary (tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndiabetesdata |&gt; group_by(HighBP, HighChol, Diabetes_binary) |&gt; summarize (count = n()) |&gt; pivot_wider(\n  names_from = Diabetes_binary,\n  values_from = count)\n\n`summarise()` has grouped output by 'HighBP', 'HighChol'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   HighBP, HighChol [4]\n  HighBP HighChol   `0`   `1`\n  &lt;fct&gt;  &lt;fct&gt;    &lt;int&gt; &lt;int&gt;\n1 0      0        97651  4269\n2 0      1        38458  4473\n3 1      0        36778  7391\n4 1      1        45447 19213\n\ndiabetesdata |&gt; group_by(PhysActivity,HvyAlcoholConsump, Diabetes_binary) |&gt; summarize (count = n ()) |&gt; pivot_wider (names_from = Diabetes_binary, values_from = count)\n\n`summarise()` has grouped output by 'PhysActivity', 'HvyAlcoholConsump'. You\ncan override using the `.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   PhysActivity, HvyAlcoholConsump [4]\n  PhysActivity HvyAlcoholConsump    `0`   `1`\n  &lt;fct&gt;        &lt;fct&gt;              &lt;int&gt; &lt;int&gt;\n1 0            0                  45847 12753\n2 0            1                   2854   306\n3 1            0                 159063 21761\n4 1            1                  10570   526\n\nsmdbtable &lt;- diabetesdata |&gt; group_by (Smoker, Diabetes_binary) |&gt; summarize (count = n()) |&gt;pivot_wider (\n  names_from = Diabetes_binary,\n  values_from = count)\n\n`summarise()` has grouped output by 'Smoker'. You can override using the\n`.groups` argument.\n\n\nWe are provided with many categorical variables with only one outcome and many others being predictors. Given diabetes are highly attributagle to life style and living condition factors, it is intuitive to make tables to calculate the hazard ratio. Luckily there is a package for that.\n\ncalculate_odds_ratio &lt;- function(data) {\n  # Compute odds ratio using contingency table\n  tab &lt;- matrix(c(data$`0`[1], data$`1`[1],\n                  data$`0`[2], data$`1`[2]),\n                nrow = 2, byrow = TRUE)\n  \n  # Use the fisher.test for OR and CI\n  test &lt;- fisher.test(tab)\n  \n  list(\n    OR = test$estimate,\n    CI = test$conf.int,\n    P_value = test$p.value\n  )\n}\n\n# Apply the function to your data\nresult &lt;- calculate_odds_ratio(smdbtable)\nprint(result)\n\n$OR\nodds ratio \n  1.419906 \n\n$CI\n[1] 1.388231 1.452338\nattr(,\"conf.level\")\n[1] 0.95\n\n$P_value\n[1] 1.406893e-204\n\n\nFor this purpose we could generate another table containing only binary factors and generate the contingency tables.\n\ndiabetesdatabin &lt;- diabetesdata |&gt; select (-BMI, -GenHlth, -MentHlth, -PhysHlth, -Age, -Education, -Income)\n\nThen we could generate the contingency table based on this.\n\ngenerate_contingency_tables &lt;- function(data, outcome) {\n  predictors &lt;- setdiff(names(data), outcome)\n  tables &lt;- lapply(predictors, function(predictor) {\n    table(data[[outcome]], data[[predictor]], dnn = c(outcome, predictor))\n  })\n  names(tables) &lt;- predictors\n  return(tables)\n}\n\ndiabetes_contingency &lt;- generate_contingency_tables (data=diabetesdatabin, outcome = \"Diabetes_binary\")\n\nHere we generated the contingency table for all binary factorial predictors. We could calculate their odds ratios.\n\nOR_HighBP &lt;- (diabetes_contingency$HighBP [2,2]/diabetes_contingency$HighBP[1,2])/(diabetes_contingency$HighBP[2,1]/diabetes_contingency$HighBP[1,1])\n\nLet’s make a function to loop through all lists in the diabetes_contigency to generate a new table called OR_table\n\ncalculate_odds_ratios &lt;- function(contingency_list) {\n  odds_ratios &lt;- lapply(contingency_list, function(table) {\n  OR_table &lt;- (table[2, 2] / table[1, 2]) / (table[2, 1] / table[1, 1])\n  return(OR_table)\n  })\n  names(odds_ratios) &lt;- names(contingency_list)\n  return(odds_ratios)\n}\ndiabetes_OR &lt;- unlist (calculate_odds_ratios (diabetes_contingency))\n\nWe could plot the odds ratio of different factors to diabetes.\n\ndiabetes_OR_df &lt;- data.frame (\n  category = names (diabetes_OR),\n  OR = as.numeric (diabetes_OR)\n)\nggplot(diabetes_OR_df, aes(x = category, y = OR)) +\n  geom_bar(stat = \"identity\", fill = ifelse(diabetes_OR_df$OR &gt; 2, \"gold\", \"skyblue\"), color = \"black\") +\n  labs(title = \"Odds ratios associated with diabetes ocurrance\", x = \"Binary Predictors\", y = \"Odds ratio\") +\n  theme(axis.text.x = element_text(angle = 60, hjust = 1))\n\n\n\n\n\n\n\n\nFrom the bar plot, we could highlight the predictors with OR bigger than 2 (generally considered “big enough” in diabetic study) to be significant contributors of diabetes, including whether or not the person has experienced heart disease or attack, stroke, has high blood pressure or high cholesterol, or experienced difficulty in walking or had their cholesterol level checked in the past 5 years. Despite being the strongest predictor of diabetes (without considering the interaction among factors), Having Cholchecked still could only have about 17% of chance being diagnosed diabetes (35105 diabetes out of 209105 people), so a model combining multiple predictors and considering predictors interaction is definitely needed.\nThere are four other factors which have more than two categories. Let’s make contingency tables with those variables.\n\ndiabetesdatamult &lt;- diabetesdata |&gt; select (Diabetes_binary, GenHlth, Age, Education, Income)\ndiabetes_contingency_mult &lt;- generate_contingency_tables (data=diabetesdatamult, outcome = \"Diabetes_binary\")\ndiabetes_contingency_mult\n\n$GenHlth\n               GenHlth\nDiabetes_binary     1     2     3     4     5\n              0 44159 82703 62189 21780  7503\n              1  1140  6381 13457  9790  4578\n\n$Age\n               Age\nDiabetes_binary     1     2     3     4     5     6     7     8     9    10\n              0  5622  7458 10809 13197 15106 18077 23226 26569 27511 25636\n              1    78   140   314   626  1051  1742  3088  4263  5733  6558\n               Age\nDiabetes_binary    11    12    13\n              0 18392 12577 14154\n              1  5141  3403  3209\n\n$Education\n               Education\nDiabetes_binary     1     2     3     4     5     6\n              0   127  2860  7182 51684 59556 96925\n              1    47  1183  2296 11066 10354 10400\n\n$Income\n               Income\nDiabetes_binary     1     2     3     4     5     6     7     8\n              0  7428  8697 12426 16081 21379 31179 37954 83190\n              1  2383  3086  3568  4054  4504  5291  5265  7195\n\n\nTo find out whether there is a relationship between the incidence of diabetes and different levels of the multi-level variables, we could conduct statistical test over each contingency table.\n\ndiabeteschisq &lt;- lapply (diabetes_contingency_mult, chisq.test)\ndiabeteschisqtable &lt;- data.frame (\n  Variable = c (\"Genhlth\", \"Age\", \"Education\", \"Income\"),\n  p_value = c (diabeteschisq$GenHlth$p.value,\n               diabeteschisq$Age$p.value,\n               diabeteschisq$Educatio$p.value,\n               diabeteschisq$Income$p.value)\n  )\ndiabeteschisqtable\n\n   Variable p_value\n1   Genhlth       0\n2       Age       0\n3 Education       0\n4    Income       0\n\n\nSo all four variables have a significant effect on the incidence of diabetes as the p-values are close to 0, meaning the chances that those variables have no effect on the incidence of diabetes are close to 0. To gain a more visual impression of the variables’ impact on diabetes, we could do this:\n\ndiabetes_contingency_mult_tibble &lt;- lapply (diabetes_contingency_mult, as_tibble)\n\nGenhlth_table &lt;- diabetes_contingency_mult_tibble$GenHlth |&gt; pivot_wider(names_from = Diabetes_binary, values_from = n) |&gt; mutate (ratio = `1` / `0`, GenHlth = as.factor (GenHlth))\n\nAge_table &lt;- diabetes_contingency_mult_tibble$Age |&gt; pivot_wider(names_from = Diabetes_binary, values_from = n) |&gt; mutate (ratio = `1` / `0`, Age= as.factor (Age))\nAge_table$Age &lt;- factor(Age_table$Age, levels = c(1,2,3,4,5,6,7,8,9,10,11,12,13))\n\n\nEdu_table &lt;- diabetes_contingency_mult_tibble$Education |&gt; pivot_wider(names_from = Diabetes_binary, values_from = n) |&gt; mutate (ratio = `1` / `0`, Education= as.factor (Education))\n\nIncome_table &lt;- diabetes_contingency_mult_tibble$Income |&gt; pivot_wider(names_from = Diabetes_binary, values_from = n) |&gt; mutate (ratio = `1` / `0`, Income= as.factor (Income))\n\nNow we could plot them\n\nlibrary (gridExtra)\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\nDiabetes_Genhlth_plot &lt;- \n  ggplot(Genhlth_table, aes(x = GenHlth, y = ratio)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Diabetes vs non-diabetes\", x = \"General Health\", y = \"Ratio\")\n\nDiabetes_Age_plot &lt;- \n  ggplot(Age_table, aes(x = Age, y = ratio)) +\n  geom_bar(stat = \"identity\", fill = \"lightgreen\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Diabetes vs non-diabetes\", x = \"Age Group\", y = \"Ratio\")\n\nDiabetes_Edu_plot &lt;- \n  ggplot(Edu_table, aes(x = Education, y = ratio)) +\n  geom_bar(stat = \"identity\", fill = \"pink\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Diabetes vs non-diabetes\", x = \"Education Level\", y = \"Ratio\")\n\nDiabetes_Income_plot &lt;- \n  ggplot(Income_table, aes(x = Income, y = ratio)) +\n  geom_bar(stat = \"identity\", fill = \"gold\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Diabetes vs non-diabetes\", x = \"Income Level\", y = \"Ratio\")\n\ngrid.arrange(Diabetes_Genhlth_plot, Diabetes_Age_plot, Diabetes_Edu_plot, Diabetes_Income_plot, ncol = 2)\n\n\n\n\n\n\n\n\nFrom the bar plot we could tell 1) People with poorest general health is the most likely to be diagnosed with diabetes; 2) As people get older, the rate of diabetes increased but topped at age group 11, which corresponds to 70 to 74 yo. 3) People in the Education level 2 and Income level 2, but not the least-educated and poorest, are the most likely to be diagnosed diabetes. This reflects the impact of social-economic status on the incidence of diabetes.\nTo measure the overall association between different categorical variable, we could use Cramér’s V method to generate the association matrix and then plot it using pheatmeap\n\nlibrary (vcd)\n\nWarning: package 'vcd' was built under R version 4.3.3\n\n\nLoading required package: grid\n\ndiabetes_var &lt;- colnames(diabetesdata)\ndiabetes_association_matrix &lt;- sapply(diabetes_var, function(x) {\n  sapply(diabetes_var, function(y) {\n    cramers_v &lt;- assocstats(table(diabetesdata[[x]], diabetesdata[[y]]))$cramer\n    return(cramers_v)\n  })\n})\n\nlibrary (pheatmap)\n\nWarning: package 'pheatmap' was built under R version 4.3.2\n\npheatmap (diabetes_association_matrix, cluster_rows = FALSE, cluster_cols = FALSE,\n          color = colorRampPalette(c(\"ivory\", \"lightyellow\", \"green\", \"darkblue\"))(100),\n          breaks = seq(0, 0.4, length.out = 101),\n          main = \"Categorical Variable Association Matrix\")\n\n\n\n\n\n\n\n\nWe could see the categorical variables most highly associated with Diabetic status is “General Health”, “High BP”, “High Chol”, “High BMI”. In addition, it is also associated with “Physical health”, “Difficult to walk”, “Heart disease or attack”, “Age” and “Income”. It is of note there are several other categorical factors that have strong association that we may need to take care of when doing modeling. Nevertheless, the strongest predictor that associates with diabetic status has a assocition score of merely 0.3. Hopefully we could find the combination of predictors through modelling that could explain ~0.7 of the diabetic status.\nClick here for the Modeling Page"
  },
  {
    "objectID": "EDA.html#data-introduction",
    "href": "EDA.html#data-introduction",
    "title": "ST558-2024-Project-Final",
    "section": "",
    "text": "Diabetes is a wide-spread disease, especially in the US. Although genetic plays a role in the ethiology of diabetes, it has been estimated around 90% to 95% of diabetes cases could be attributed to life-style factors, like diet, weight management and physical activity.This data set aimed to providel links between patients’ diabetic conditions, life pattern behavior and social-economic status.\nFor this project, a csv of the data set available on Kaggle for the year 2015 was used. This original data set contains responses from 441,455 individuals and has 330 features. These features are either questions directly asked of participants, or calculated variables based on individual participant responses.The file we are interested in (diabetes _ binary _ health _ indicators _ BRFSS2015.csv) is a clean dataset of 253,680 survey responses to the CDC’s BRFSS2015. The target variable Diabetes_binary has 2 classes. 0 is for no diabetes, and 1 is for prediabetes or diabetes. This dataset has 21 feature variables and is not balanced. Our goal is to find how the combination of different input factors could contribute to the prediction of diabetic status."
  },
  {
    "objectID": "EDA.html#data-reading-and-cleaning",
    "href": "EDA.html#data-reading-and-cleaning",
    "title": "ST558-2024-Project-Final",
    "section": "",
    "text": "Let’s read the file into R first.\n\ndiabetesdata &lt;- read.csv (\"data\\\\diabetes_binary_health_indicators_BRFSS2015.csv\")\nstr (diabetesdata)\n\n'data.frame':   253680 obs. of  22 variables:\n $ Diabetes_binary     : num  0 0 0 0 0 0 0 0 1 0 ...\n $ HighBP              : num  1 0 1 1 1 1 1 1 1 0 ...\n $ HighChol            : num  1 0 1 0 1 1 0 1 1 0 ...\n $ CholCheck           : num  1 0 1 1 1 1 1 1 1 1 ...\n $ BMI                 : num  40 25 28 27 24 25 30 25 30 24 ...\n $ Smoker              : num  1 1 0 0 0 1 1 1 1 0 ...\n $ Stroke              : num  0 0 0 0 0 0 0 0 0 0 ...\n $ HeartDiseaseorAttack: num  0 0 0 0 0 0 0 0 1 0 ...\n $ PhysActivity        : num  0 1 0 1 1 1 0 1 0 0 ...\n $ Fruits              : num  0 0 1 1 1 1 0 0 1 0 ...\n $ Veggies             : num  1 0 0 1 1 1 0 1 1 1 ...\n $ HvyAlcoholConsump   : num  0 0 0 0 0 0 0 0 0 0 ...\n $ AnyHealthcare       : num  1 0 1 1 1 1 1 1 1 1 ...\n $ NoDocbcCost         : num  0 1 1 0 0 0 0 0 0 0 ...\n $ GenHlth             : num  5 3 5 2 2 2 3 3 5 2 ...\n $ MentHlth            : num  18 0 30 0 3 0 0 0 30 0 ...\n $ PhysHlth            : num  15 0 30 0 0 2 14 0 30 0 ...\n $ DiffWalk            : num  1 0 1 0 0 0 0 1 1 0 ...\n $ Sex                 : num  0 0 0 0 0 1 0 0 0 1 ...\n $ Age                 : num  9 7 9 11 11 10 9 11 9 8 ...\n $ Education           : num  4 6 4 3 5 6 6 4 5 4 ...\n $ Income              : num  3 1 8 6 4 8 7 4 1 3 ...\n\n\nAs shown, this data set has 22 variables, we will use only 1 Diabetes_binary as an outcome variable, and all others as predictors. However, there are many numeric variables that should actually be treated as factors. We will change those variables.\n\nlibrary (dplyr)\n\nWarning: package 'dplyr' was built under R version 4.3.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndiabetesdata &lt;- diabetesdata |&gt; mutate (across (-c(MentHlth, PhysHlth, BMI), as.factor))\nstr (diabetesdata)\n\n'data.frame':   253680 obs. of  22 variables:\n $ Diabetes_binary     : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 1 1 1 2 1 ...\n $ HighBP              : Factor w/ 2 levels \"0\",\"1\": 2 1 2 2 2 2 2 2 2 1 ...\n $ HighChol            : Factor w/ 2 levels \"0\",\"1\": 2 1 2 1 2 2 1 2 2 1 ...\n $ CholCheck           : Factor w/ 2 levels \"0\",\"1\": 2 1 2 2 2 2 2 2 2 2 ...\n $ BMI                 : num  40 25 28 27 24 25 30 25 30 24 ...\n $ Smoker              : Factor w/ 2 levels \"0\",\"1\": 2 2 1 1 1 2 2 2 2 1 ...\n $ Stroke              : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ HeartDiseaseorAttack: Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 1 1 1 2 1 ...\n $ PhysActivity        : Factor w/ 2 levels \"0\",\"1\": 1 2 1 2 2 2 1 2 1 1 ...\n $ Fruits              : Factor w/ 2 levels \"0\",\"1\": 1 1 2 2 2 2 1 1 2 1 ...\n $ Veggies             : Factor w/ 2 levels \"0\",\"1\": 2 1 1 2 2 2 1 2 2 2 ...\n $ HvyAlcoholConsump   : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 1 1 1 1 1 ...\n $ AnyHealthcare       : Factor w/ 2 levels \"0\",\"1\": 2 1 2 2 2 2 2 2 2 2 ...\n $ NoDocbcCost         : Factor w/ 2 levels \"0\",\"1\": 1 2 2 1 1 1 1 1 1 1 ...\n $ GenHlth             : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 5 3 5 2 2 2 3 3 5 2 ...\n $ MentHlth            : num  18 0 30 0 3 0 0 0 30 0 ...\n $ PhysHlth            : num  15 0 30 0 0 2 14 0 30 0 ...\n $ DiffWalk            : Factor w/ 2 levels \"0\",\"1\": 2 1 2 1 1 1 1 2 2 1 ...\n $ Sex                 : Factor w/ 2 levels \"0\",\"1\": 1 1 1 1 1 2 1 1 1 2 ...\n $ Age                 : Factor w/ 13 levels \"1\",\"2\",\"3\",\"4\",..: 9 7 9 11 11 10 9 11 9 8 ...\n $ Education           : Factor w/ 6 levels \"1\",\"2\",\"3\",\"4\",..: 4 6 4 3 5 6 6 4 5 4 ...\n $ Income              : Factor w/ 8 levels \"1\",\"2\",\"3\",\"4\",..: 3 1 8 6 4 8 7 4 1 3 ...\n\n\nNow you could see the attributes of the variables have been reset. Let’s check whether are missing values in each column.\n\nmissing_counts &lt;- diabetesdata |&gt; \n  summarise(across(everything(), ~sum(is.na(.))))\nmissing_counts\n\n  Diabetes_binary HighBP HighChol CholCheck BMI Smoker Stroke\n1               0      0        0         0   0      0      0\n  HeartDiseaseorAttack PhysActivity Fruits Veggies HvyAlcoholConsump\n1                    0            0      0       0                 0\n  AnyHealthcare NoDocbcCost GenHlth MentHlth PhysHlth DiffWalk Sex Age\n1             0           0       0        0        0        0   0   0\n  Education Income\n1         0      0\n\n\nTo our relief, there is no missing data in the data set. Now we are ready to do some exploratory data analysis."
  },
  {
    "objectID": "EDA.html#exploratory-data-analysis",
    "href": "EDA.html#exploratory-data-analysis",
    "title": "ST558-2024-Project-Final",
    "section": "",
    "text": "We could generate a table with incidence of diabetes and other categorical variables.\n\ntable (diabetesdata$Diabetes_binary, diabetesdata$HighBP, diabetesdata$HighChol)\n\n, ,  = 0\n\n   \n        0     1\n  0 97651 36778\n  1  4269  7391\n\n, ,  = 1\n\n   \n        0     1\n  0 38458 45447\n  1  4473 19213\n\ndiabetesdata |&gt; group_by(HighBP, HighChol, Diabetes_binary) |&gt; summarize (count = n())\n\n`summarise()` has grouped output by 'HighBP', 'HighChol'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 8 × 4\n# Groups:   HighBP, HighChol [4]\n  HighBP HighChol Diabetes_binary count\n  &lt;fct&gt;  &lt;fct&gt;    &lt;fct&gt;           &lt;int&gt;\n1 0      0        0               97651\n2 0      0        1                4269\n3 0      1        0               38458\n4 0      1        1                4473\n5 1      0        0               36778\n6 1      0        1                7391\n7 1      1        0               45447\n8 1      1        1               19213\n\ndiabetesdata |&gt; group_by (Smoker, HeartDiseaseorAttack, Diabetes_binary) |&gt; summarize (count = n())\n\n`summarise()` has grouped output by 'Smoker', 'HeartDiseaseorAttack'. You can\noverride using the `.groups` argument.\n\n\n# A tibble: 8 × 4\n# Groups:   Smoker, HeartDiseaseorAttack [4]\n  Smoker HeartDiseaseorAttack Diabetes_binary  count\n  &lt;fct&gt;  &lt;fct&gt;                &lt;fct&gt;            &lt;int&gt;\n1 0      0                    0               118086\n2 0      0                    1                14079\n3 0      1                    0                 6142\n4 0      1                    1                 2950\n5 1      0                    0                84233\n6 1      0                    1                13389\n7 1      1                    0                 9873\n8 1      1                    1                 4928\n\n\nFrom the summary table we could easily find those factors significantly contribute to the occurance of diabetes. Is there a way to find the hazard ratio of those life-style factors to diabetes? Luckily there is a package for that.\n\nlibrary (tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\nWarning: package 'stringr' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ndiabetesdata |&gt; group_by(HighBP, HighChol, Diabetes_binary) |&gt; summarize (count = n()) |&gt; pivot_wider(\n  names_from = Diabetes_binary,\n  values_from = count)\n\n`summarise()` has grouped output by 'HighBP', 'HighChol'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   HighBP, HighChol [4]\n  HighBP HighChol   `0`   `1`\n  &lt;fct&gt;  &lt;fct&gt;    &lt;int&gt; &lt;int&gt;\n1 0      0        97651  4269\n2 0      1        38458  4473\n3 1      0        36778  7391\n4 1      1        45447 19213\n\ndiabetesdata |&gt; group_by(PhysActivity,HvyAlcoholConsump, Diabetes_binary) |&gt; summarize (count = n ()) |&gt; pivot_wider (names_from = Diabetes_binary, values_from = count)\n\n`summarise()` has grouped output by 'PhysActivity', 'HvyAlcoholConsump'. You\ncan override using the `.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   PhysActivity, HvyAlcoholConsump [4]\n  PhysActivity HvyAlcoholConsump    `0`   `1`\n  &lt;fct&gt;        &lt;fct&gt;              &lt;int&gt; &lt;int&gt;\n1 0            0                  45847 12753\n2 0            1                   2854   306\n3 1            0                 159063 21761\n4 1            1                  10570   526\n\nsmdbtable &lt;- diabetesdata |&gt; group_by (Smoker, Diabetes_binary) |&gt; summarize (count = n()) |&gt;pivot_wider (\n  names_from = Diabetes_binary,\n  values_from = count)\n\n`summarise()` has grouped output by 'Smoker'. You can override using the\n`.groups` argument.\n\n\nWe are provided with many categorical variables with only one outcome and many others being predictors. Given diabetes are highly attributagle to life style and living condition factors, it is intuitive to make tables to calculate the hazard ratio. Luckily there is a package for that.\n\ncalculate_odds_ratio &lt;- function(data) {\n  # Compute odds ratio using contingency table\n  tab &lt;- matrix(c(data$`0`[1], data$`1`[1],\n                  data$`0`[2], data$`1`[2]),\n                nrow = 2, byrow = TRUE)\n  \n  # Use the fisher.test for OR and CI\n  test &lt;- fisher.test(tab)\n  \n  list(\n    OR = test$estimate,\n    CI = test$conf.int,\n    P_value = test$p.value\n  )\n}\n\n# Apply the function to your data\nresult &lt;- calculate_odds_ratio(smdbtable)\nprint(result)\n\n$OR\nodds ratio \n  1.419906 \n\n$CI\n[1] 1.388231 1.452338\nattr(,\"conf.level\")\n[1] 0.95\n\n$P_value\n[1] 1.406893e-204\n\n\nFor this purpose we could generate another table containing only binary factors and generate the contingency tables.\n\ndiabetesdatabin &lt;- diabetesdata |&gt; select (-BMI, -GenHlth, -MentHlth, -PhysHlth, -Age, -Education, -Income)\n\nThen we could generate the contingency table based on this.\n\ngenerate_contingency_tables &lt;- function(data, outcome) {\n  predictors &lt;- setdiff(names(data), outcome)\n  tables &lt;- lapply(predictors, function(predictor) {\n    table(data[[outcome]], data[[predictor]], dnn = c(outcome, predictor))\n  })\n  names(tables) &lt;- predictors\n  return(tables)\n}\n\ndiabetes_contingency &lt;- generate_contingency_tables (data=diabetesdatabin, outcome = \"Diabetes_binary\")\n\nHere we generated the contingency table for all binary factorial predictors. We could calculate their odds ratios.\n\nOR_HighBP &lt;- (diabetes_contingency$HighBP [2,2]/diabetes_contingency$HighBP[1,2])/(diabetes_contingency$HighBP[2,1]/diabetes_contingency$HighBP[1,1])\n\nLet’s make a function to loop through all lists in the diabetes_contigency to generate a new table called OR_table\n\ncalculate_odds_ratios &lt;- function(contingency_list) {\n  odds_ratios &lt;- lapply(contingency_list, function(table) {\n  OR_table &lt;- (table[2, 2] / table[1, 2]) / (table[2, 1] / table[1, 1])\n  return(OR_table)\n  })\n  names(odds_ratios) &lt;- names(contingency_list)\n  return(odds_ratios)\n}\ndiabetes_OR &lt;- unlist (calculate_odds_ratios (diabetes_contingency))\n\nWe could plot the odds ratio of different factors to diabetes.\n\ndiabetes_OR_df &lt;- data.frame (\n  category = names (diabetes_OR),\n  OR = as.numeric (diabetes_OR)\n)\nggplot(diabetes_OR_df, aes(x = category, y = OR)) +\n  geom_bar(stat = \"identity\", fill = ifelse(diabetes_OR_df$OR &gt; 2, \"gold\", \"skyblue\"), color = \"black\") +\n  labs(title = \"Odds ratios associated with diabetes ocurrance\", x = \"Binary Predictors\", y = \"Odds ratio\") +\n  theme(axis.text.x = element_text(angle = 60, hjust = 1))\n\n\n\n\n\n\n\n\nFrom the bar plot, we could highlight the predictors with OR bigger than 2 (generally considered “big enough” in diabetic study) to be significant contributors of diabetes, including whether or not the person has experienced heart disease or attack, stroke, has high blood pressure or high cholesterol, or experienced difficulty in walking or had their cholesterol level checked in the past 5 years. Despite being the strongest predictor of diabetes (without considering the interaction among factors), Having Cholchecked still could only have about 17% of chance being diagnosed diabetes (35105 diabetes out of 209105 people), so a model combining multiple predictors and considering predictors interaction is definitely needed.\nThere are four other factors which have more than two categories. Let’s make contingency tables with those variables.\n\ndiabetesdatamult &lt;- diabetesdata |&gt; select (Diabetes_binary, GenHlth, Age, Education, Income)\ndiabetes_contingency_mult &lt;- generate_contingency_tables (data=diabetesdatamult, outcome = \"Diabetes_binary\")\ndiabetes_contingency_mult\n\n$GenHlth\n               GenHlth\nDiabetes_binary     1     2     3     4     5\n              0 44159 82703 62189 21780  7503\n              1  1140  6381 13457  9790  4578\n\n$Age\n               Age\nDiabetes_binary     1     2     3     4     5     6     7     8     9    10\n              0  5622  7458 10809 13197 15106 18077 23226 26569 27511 25636\n              1    78   140   314   626  1051  1742  3088  4263  5733  6558\n               Age\nDiabetes_binary    11    12    13\n              0 18392 12577 14154\n              1  5141  3403  3209\n\n$Education\n               Education\nDiabetes_binary     1     2     3     4     5     6\n              0   127  2860  7182 51684 59556 96925\n              1    47  1183  2296 11066 10354 10400\n\n$Income\n               Income\nDiabetes_binary     1     2     3     4     5     6     7     8\n              0  7428  8697 12426 16081 21379 31179 37954 83190\n              1  2383  3086  3568  4054  4504  5291  5265  7195\n\n\nTo find out whether there is a relationship between the incidence of diabetes and different levels of the multi-level variables, we could conduct statistical test over each contingency table.\n\ndiabeteschisq &lt;- lapply (diabetes_contingency_mult, chisq.test)\ndiabeteschisqtable &lt;- data.frame (\n  Variable = c (\"Genhlth\", \"Age\", \"Education\", \"Income\"),\n  p_value = c (diabeteschisq$GenHlth$p.value,\n               diabeteschisq$Age$p.value,\n               diabeteschisq$Educatio$p.value,\n               diabeteschisq$Income$p.value)\n  )\ndiabeteschisqtable\n\n   Variable p_value\n1   Genhlth       0\n2       Age       0\n3 Education       0\n4    Income       0\n\n\nSo all four variables have a significant effect on the incidence of diabetes as the p-values are close to 0, meaning the chances that those variables have no effect on the incidence of diabetes are close to 0. To gain a more visual impression of the variables’ impact on diabetes, we could do this:\n\ndiabetes_contingency_mult_tibble &lt;- lapply (diabetes_contingency_mult, as_tibble)\n\nGenhlth_table &lt;- diabetes_contingency_mult_tibble$GenHlth |&gt; pivot_wider(names_from = Diabetes_binary, values_from = n) |&gt; mutate (ratio = `1` / `0`, GenHlth = as.factor (GenHlth))\n\nAge_table &lt;- diabetes_contingency_mult_tibble$Age |&gt; pivot_wider(names_from = Diabetes_binary, values_from = n) |&gt; mutate (ratio = `1` / `0`, Age= as.factor (Age))\nAge_table$Age &lt;- factor(Age_table$Age, levels = c(1,2,3,4,5,6,7,8,9,10,11,12,13))\n\n\nEdu_table &lt;- diabetes_contingency_mult_tibble$Education |&gt; pivot_wider(names_from = Diabetes_binary, values_from = n) |&gt; mutate (ratio = `1` / `0`, Education= as.factor (Education))\n\nIncome_table &lt;- diabetes_contingency_mult_tibble$Income |&gt; pivot_wider(names_from = Diabetes_binary, values_from = n) |&gt; mutate (ratio = `1` / `0`, Income= as.factor (Income))\n\nNow we could plot them\n\nlibrary (gridExtra)\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\nDiabetes_Genhlth_plot &lt;- \n  ggplot(Genhlth_table, aes(x = GenHlth, y = ratio)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Diabetes vs non-diabetes\", x = \"General Health\", y = \"Ratio\")\n\nDiabetes_Age_plot &lt;- \n  ggplot(Age_table, aes(x = Age, y = ratio)) +\n  geom_bar(stat = \"identity\", fill = \"lightgreen\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Diabetes vs non-diabetes\", x = \"Age Group\", y = \"Ratio\")\n\nDiabetes_Edu_plot &lt;- \n  ggplot(Edu_table, aes(x = Education, y = ratio)) +\n  geom_bar(stat = \"identity\", fill = \"pink\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Diabetes vs non-diabetes\", x = \"Education Level\", y = \"Ratio\")\n\nDiabetes_Income_plot &lt;- \n  ggplot(Income_table, aes(x = Income, y = ratio)) +\n  geom_bar(stat = \"identity\", fill = \"gold\", color = \"black\", alpha = 0.5) +\n  labs(title = \"Diabetes vs non-diabetes\", x = \"Income Level\", y = \"Ratio\")\n\ngrid.arrange(Diabetes_Genhlth_plot, Diabetes_Age_plot, Diabetes_Edu_plot, Diabetes_Income_plot, ncol = 2)\n\n\n\n\n\n\n\n\nFrom the bar plot we could tell 1) People with poorest general health is the most likely to be diagnosed with diabetes; 2) As people get older, the rate of diabetes increased but topped at age group 11, which corresponds to 70 to 74 yo. 3) People in the Education level 2 and Income level 2, but not the least-educated and poorest, are the most likely to be diagnosed diabetes. This reflects the impact of social-economic status on the incidence of diabetes.\nTo measure the overall association between different categorical variable, we could use Cramér’s V method to generate the association matrix and then plot it using pheatmeap\n\nlibrary (vcd)\n\nWarning: package 'vcd' was built under R version 4.3.3\n\n\nLoading required package: grid\n\ndiabetes_var &lt;- colnames(diabetesdata)\ndiabetes_association_matrix &lt;- sapply(diabetes_var, function(x) {\n  sapply(diabetes_var, function(y) {\n    cramers_v &lt;- assocstats(table(diabetesdata[[x]], diabetesdata[[y]]))$cramer\n    return(cramers_v)\n  })\n})\n\nlibrary (pheatmap)\n\nWarning: package 'pheatmap' was built under R version 4.3.2\n\npheatmap (diabetes_association_matrix, cluster_rows = FALSE, cluster_cols = FALSE,\n          color = colorRampPalette(c(\"ivory\", \"lightyellow\", \"green\", \"darkblue\"))(100),\n          breaks = seq(0, 0.4, length.out = 101),\n          main = \"Categorical Variable Association Matrix\")\n\n\n\n\n\n\n\n\nWe could see the categorical variables most highly associated with Diabetic status is “General Health”, “High BP”, “High Chol”, “High BMI”. In addition, it is also associated with “Physical health”, “Difficult to walk”, “Heart disease or attack”, “Age” and “Income”. It is of note there are several other categorical factors that have strong association that we may need to take care of when doing modeling. Nevertheless, the strongest predictor that associates with diabetic status has a assocition score of merely 0.3. Hopefully we could find the combination of predictors through modelling that could explain ~0.7 of the diabetic status.\nClick here for the Modeling Page"
  }
]