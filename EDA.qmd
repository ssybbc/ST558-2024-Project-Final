---
title: "ST558-2024-Project-Final"
format: html
editor: visual
---

# Final project: inferring on the diabetes data set

## Data Introduction

Diabetes is a wide-spread disease, especially in the US. Although genetic plays a role in the ethiology of diabetes, it has been estimated around 90% to 95% of diabetes cases could be attributed to life-style factors, like diet, weight management and physical activity.This data set aimed to providel links between patients' diabetic conditions, life pattern behavior and social-economic status.

For this project, a csv of the data set available on Kaggle for the year 2015 was used. This original data set contains responses from 441,455 individuals and has 330 features. These features are either questions directly asked of participants, or calculated variables based on individual participant responses.The file we are interested in (*diabetes \_ binary \_ health \_ indicators \_ BRFSS2015.csv*) is a clean dataset of 253,680 survey responses to the CDC's BRFSS2015. The target variable Diabetes_binary has 2 classes. 0 is for no diabetes, and 1 is for prediabetes or diabetes. This dataset has 21 feature variables and is not balanced. Our goal is to find how the combination of different input factors could contribute to the prediction of diabetic status.

## Data reading and cleaning

Let's read the file into R first.

```{r}
diabetesdata <- read.csv ("data\\diabetes_binary_health_indicators_BRFSS2015.csv")
str (diabetesdata)
```

As shown, this data set has 22 variables, we will use only 1 **Diabetes_binary** as an outcome variable, and all others as predictors. However, there are many numeric variables that should actually be treated as factors. We will change those variables.

```{r}
library (dplyr)
diabetesdata <- diabetesdata |> mutate (across (-c(MentHlth, PhysHlth, BMI), as.factor))
str (diabetesdata)
```

Now you could see the attributes of the variables have been reset. Let's check whether are missing values in each column. 

```{r}
missing_counts <- diabetesdata |> 
  summarise(across(everything(), ~sum(is.na(.))))
missing_counts
```
To our relief, there is no missing data in the data set. Now we are ready to do some exploratory data analysis.

## Exploratory data analysis

We could generate a table with incidence of diabetes and other categorical variables.
```{r}
table (diabetesdata$Diabetes_binary, diabetesdata$HighBP, diabetesdata$HighChol)
diabetesdata |> group_by(HighBP, HighChol, Diabetes_binary) |> summarize (count = n())
diabetesdata |> group_by (Smoker, HeartDiseaseorAttack, Diabetes_binary) |> summarize (count = n())
```
From the summary table we could easily find those factors significantly contribute to the occurance of diabetes. Is there a way to find the hazard ratio of those life-style factors to diabetes? Luckily there is a package for that.

```{r}
diabetesdata |> group_by(HighBP, HighChol, Diabetes_binary) |> summarize (count = n()) |> pivot_wider(
  names_from = Diabetes_binary,
  values_from = count)

diabetesdata |> group_by(PhysActivity,HvyAlcoholConsump, Diabetes_binary) |> summarize (count = n ()) |> pivot_wider (names_from = Diabetes_binary, values_from = count)

smdbtable <- diabetesdata |> group_by (Smoker, Diabetes_binary) |> summarize (count = n()) |>pivot_wider (
  names_from = Diabetes_binary,
  values_from = count)
```

We are provided with many categorical variables with only one outcome and many others being predictors. Given diabetes are highly attributagle to life style and living condition factors, it is intuitive to make tables to calculate the hazard ratio. Luckily there is a package for that.

```{r}
calculate_odds_ratio <- function(data) {
  # Compute odds ratio using contingency table
  tab <- matrix(c(data$`0`[1], data$`1`[1],
                  data$`0`[2], data$`1`[2]),
                nrow = 2, byrow = TRUE)
  
  # Use the fisher.test for OR and CI
  test <- fisher.test(tab)
  
  list(
    OR = test$estimate,
    CI = test$conf.int,
    P_value = test$p.value
  )
}

# Apply the function to your data
result <- calculate_odds_ratio(smdbtable)
print(result)
```

For this purpose we could generate another table containing only binary factors and generate the contingency tables.

```{r}
diabetesdatabin <- diabetesdata |> select (-BMI, -GenHlth, -MentHlth, -PhysHlth, -Age, -Education, -Income)
```

Then we could generate the contingency table based on this.

```{r}
generate_contingency_tables <- function(data, outcome) {
  predictors <- setdiff(names(data), outcome)
  tables <- lapply(predictors, function(predictor) {
    table(data[[outcome]], data[[predictor]], dnn = c(outcome, predictor))
  })
  names(tables) <- predictors
  return(tables)
}

diabetes_contingency <- generate_contingency_tables (data=diabetesdatabin, outcome = "Diabetes_binary")
```
Here we generated the contingency table for all binary factorial predictors. We could calculate their odds ratios.

```{r}
OR_HighBP <- (diabetes_contingency$HighBP [2,2]/diabetes_contingency$HighBP[1,2])/
                     (diabetes_contingency$HighBP[2,1]/diabetes_contingency$HighBP[1,1])
```
Let's make a function to loop through all lists in the *diabetes_contigency* to generate a new table called *OR_table*

```{r}
calculate_odds_ratios <- function(contingency_list) {
  odds_ratios <- lapply(contingency_list, function(table) {
  OR_table <- (table[2, 2] / table[1, 2]) / (table[2, 1] / table[1, 1])
  return(OR_table)
  })
  names(odds_ratios) <- names(contingency_list)
  return(odds_ratios)
}
calculate_odds_ratios (diabetes_contingency)
```

```{r}

```


```{r}
# Example data with multiple conditions
data_list <- list(
  BP = data.frame(Diabetes = c(30, 10), Non_Diabetes = c(70, 90)),
  Smoking = data.frame(Diabetes = c(25, 15), Non_Diabetes = c(75, 85))
)

# Loop through each condition
results <- lapply(data_list, calculate_odds_ratio)

# Compile results into a data frame for plotting
plot_data <- do.call(rbind, lapply(names(results), function(cond) {
  res <- results[[cond]]
  data.frame(
    Condition = cond,
    OR = res$OR,
    Lower_CI = res$CI[1],
    Upper_CI = res$CI[2]
  )
}))

# Plot combined results
ggplot(plot_data, aes(x = Condition, y = OR)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  scale_y_log10() +
  labs(title = "Odds Ratios for Multiple Conditions",
       y = "Odds Ratio (log scale)",
       x = "Condition") +
  theme_minimal()
```

